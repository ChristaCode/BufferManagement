#include <sys/types.h> /* This is the server code */
#include <sys/fcntl.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#define SERVER PORT 12345 /* arbitrary, but client & server must agree */
#define BUF SIZE 4096 /* block transfer size */
#define QUEUE SIZE 10
int main(int argc, char*argv[])
{
int s, b, l, fd, sa, bytes, on = 1;
char buf[BUF SIZE]; /* buffer for outgoing file */
struct sockaddr in channel; /* holds IP address */

memset(&channel, 0, sizeof(channel)); /* zero channel*/
channel.sin family = AF INET;
channel.sin addr.s addr = htonl(INADDR ANY);
channel.sin port = htons(SERVER PORT);

s = socket(AF INET, SOCK STREAM, IPPROTO TCP); /* create socket*/
if (s < 0) fatal("socket failed");
setsockopt(s, SOL SOCKET, SO REUSEADDR, (char*) &on, sizeof(on));
b = bind(s, (struct sockaddr*) &channel, sizeof(channel));
if (b < 0) fatal("bind failed");
l = listen(s, QUEUE SIZE); /* specify queue size */
if (l < 0) fatal("listen failed");

while (1) {
sa = accept(s, 0, 0); /* block for connection request*/
if (sa < 0) fatal("accept failed");
read(sa, buf, BUF SIZE); /*read file name from socket*/

fd = open(buf, O RDONLY); /* open the file to be sent back */
if (fd < 0) fatal("open failed");
while (1) {
bytes = read(fd, buf, BUF SIZE); /*read from file */
if (bytes <= 0) break; /* check for end of file */
write(sa, buf, bytes); /* write bytes to socket*/
}
close(fd); /* close file */
close(sa); /* close connection */
}
}
